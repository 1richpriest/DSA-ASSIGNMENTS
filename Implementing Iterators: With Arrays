/**
 * ArrayListIterator iterator over the elements of an ArrayList.
 */
private class ArrayListIterator implements Iterator<T>
{
 int iteratorModCount;
 int current;
 /**
 * Sets up this iterator using the specified modCount.
 *
 * @param modCount the current modification count for the ArrayList
 */
 public ArrayListIterator()
 {
 iteratorModCount = modCount;
 current = 0;
 }
 /**
 * Returns true if this iterator has at least one more element
 * to deliver in the iteration.
 *
 * @return true if this iterator has at least one more element to deliver
 * in the iteration
 * @throws ConcurrentModificationException if the collection has changed
 * while the iterator is in use
 */
 public boolean hasNext() throws ConcurrentModificationException
 {
 if (iteratorModCount != modCount)
 throw new ConcurrentModificationException();
 return (current < rear);
 }
 /**
 * Returns the next element in the iteration. If there are no
 * more elements in this iteration, a NoSuchElementException is
 * thrown.
 *
 * @return the next element in the iteration
 * @throws NoSuchElementException if an element not found exception occurs
 * @throws ConcurrentModificationException if the collection has changed
 */
 public T next() throws ConcurrentModificationException
 {
 if (!hasNext())
 throw new NoSuchElementException();
 current++;
 return list[current - 1];
 }
 /**
 * The remove operation is not supported in this collection.
 *
 * @throws UnsupportedOperationException if the remove method is called
 */
 public void remove() throws UnsupportedOperationException
 {
 throw new UnsupportedOperationException();
 }
}
